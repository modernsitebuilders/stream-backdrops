// CREATE a new file: components/CategoryCards.js

import { useState, useEffect, useCallback } from 'react';
import Link from 'next/link';
import Image from 'next/image';

const categoryInfo = {
  'home-lifestyle': {
    name: 'Home Offices',
    description: 'Professional home office backgrounds perfect for remote work and video calls',
    image: 'clean-scandinavian-home-office-2'
  },
  'home-lifestyle': {
    name: 'Executive Offices',
    description: 'Luxury executive office backgrounds for leadership meetings and professional calls',
    image: 'corner-office-with-city-views-1'
  },
  'professional-shelves': {
    name: 'Minimalist',
    description: 'Clean, minimalist backgrounds for modern professionals',
    image: 'minimalist-executive-office-1'
  },
  'professional-shelves': {
    name: 'Lobbies',
    description: 'Professional lobby backgrounds for client meetings and business calls',
    image: 'modern-glass-lobby-3'
  },
  'professional-shelves': {
    name: 'Private Offices',
    description: 'Specialized private office backgrounds for professional consultations and meetings',
    image: 'private-office-with-bookshelf-1'
  }
};

export default function CategoryCards() {
  const [imageCounts, setImageCounts] = useState({});
  const [loading, setLoading] = useState(true);

  // Get actual image counts for each category
  useEffect(() => {
    const loadImageCounts = async () => {
      try {
        const response = await fetch('/api/metadata');
        if (response.ok) {
          const metadata = await response.json();
          
          // Count images in each category
          const counts = {};
          Object.values(metadata).forEach(image => {
            if (image.category) {
              counts[image.category] = (counts[image.category] || 0) + 1;
            }
          });
          
          setImageCounts(counts);
        }
      } catch (error) {
        console.error('Failed to load image counts:', error);
      } finally {
        setLoading(false);
      }
    };

    loadImageCounts();
  }, []);

  const getImageCount = (category) => {
    if (loading) return 'Loading...';
    const count = imageCounts[category] || 0;
    return count > 0 ? `${count} Free Background${count === 1 ? '' : 's'}` : 'Coming Soon';
  };

  return (
    <div className="category-grid">
      {Object.entries(categoryInfo).map(([key, info], index) => (
        <Link href="#" 
          key={key}
          href="#"`}
          className="category-card"
        >
          <div style={{
            position: 'relative',
            height: 'clamp(200px, 25vw, 280px)',
            overflow: 'hidden',
            background: '#f3f4f6'
          }}>
            <Image
              src={`/images/${info.image}.webp`}
              alt={info.name}
              fill
              style={{ objectFit: 'cover' }}
              loading={index === 0 ? "eager" : "lazy"}
              priority={index === 0}
              quality={75}
              sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 400px"
            />
            
            <div style={{
              position: 'absolute',
              bottom: 0,
              left: 0,
              right: 0,
              background: 'linear-gradient(transparent, rgba(0,0,0,0.6))',
              color: 'white',
              padding: 'clamp(1rem, 3vw, 2rem) clamp(1rem, 2vw, 1.5rem) clamp(0.5rem, 2vw, 1rem)',
              textAlign: 'left'
            }}>
              <h3 style={{
                fontSize: 'clamp(1.25rem, 3vw, 1.75rem)',
                fontWeight: 'bold',
                marginBottom: '0.5rem',
                textShadow: '0 1px 3px rgba(0,0,0,0.5)'
              }}>
                {info.name}
              </h3>
              <p style={{
                fontSize: 'clamp(0.9rem, 1.5vw, 1rem)',
                opacity: 0.9,
                textShadow: '0 1px 2px rgba(0,0,0,0.5)',
                lineHeight: 1.4,
                display: '-webkit-box',
                WebkitLineClamp: 2,
                WebkitBoxOrient: 'vertical',
                overflow: 'hidden'
              }}>
                {info.description}
              </p>
            </div>
          </div>

          <div style={{
            padding: 'clamp(1.5rem, 3vw, 2rem)'
          }}>
            <div style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between'
            }}>
              <div>
                <p style={{
                  color: loading ? '#6b7280' : (imageCounts[key] > 0 ? '#16a34a' : '#f59e0b'),
                  fontWeight: 'bold',
                  fontSize: 'clamp(1rem, 2vw, 1.1rem)',
                  marginBottom: '0.5rem'
                }}>
                  {getImageCount(key)}
                </p>
                <p style={{
                  color: '#6b7280',
                  fontSize: 'clamp(0.85rem, 1.5vw, 0.9rem)'
                }}>
                  HD • Ready for video calls
                </p>
              </div>
              
              <div style={{
                background: '#2563eb',
                color: 'white',
                padding: '0.75rem',
                borderRadius: '50%',
                fontSize: 'clamp(1.2rem, 2vw, 1.5rem)'
              }}>
                →
              </div>
            </div>
          </div>
        </Link>
      ))}
    </div>
  );
}